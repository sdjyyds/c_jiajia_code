//1.单链表
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010;
int e[N],idx,head=-1,ne[N];
void add_to_head(int x)
{
    e[idx]=x,ne[idx]=head,head=idx++;
}
void Insert(int k,int x)
{
    e[idx]=x,ne[idx]=ne[k],ne[k]=idx++;
}
void remove(int k)
{
    ne[k]=ne[ne[k]];
}
int main()
{
    int m;
    cin>>m;
    while(m--)
    {
        int k,x;
        char ch1[2];
        scanf("%s",ch1);
        if(*ch1=='I')
        {
            scanf("%d%d",&k,&x);
            Insert(k-1,x);
        }
        else if(*ch1=='H')
        {
            scanf("%d",&x);
            add_to_head(x);
        }
        else
        {
            scanf("%d",&k);
            if(k)remove(k-1);
            else head=ne[head];
        }
    }
    for(int i=head;i!=-1;i=ne[i]) printf("%d ",e[i]);
}

//2.双链表
#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
const int N=1000010;
int e[N],l[N],r[N],idx=2;
void Insert(int k,int x)
{
    e[idx]=x,l[idx]=k,r[idx]=r[k],l[r[k]]=idx,r[k]=idx++;
}
void remove(int k)
{
    l[r[k]]=l[k],r[l[k]]=r[k];
}
int main()
{
    l[1]=0,r[0]=1;
    int m;
    cin>>m;
    while(m--)
    {
        string ch;
        int k,x;
        cin>>ch;
        if(ch=="IL")
        {
            cin>>k>>x;
            Insert(l[k+1],x);
        }
        else if(ch=="IR")
        {
            cin>>k>>x;
            Insert(k+1,x);
        }
        else if(ch=="L")
        {
            cin>>x;
            Insert(0,x);
        }
        else if(ch=="R")
        {
            cin>>x;
            Insert(l[1],x);
        }
        else
        {
            cin>>k;
            remove(k+1);
        }
    }
    for(int i=r[0];i!=1;i=r[i]) cout<<e[i]<<" ";
}

//3.模拟栈
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int top=-1,e[N];
int main()
{
    int m;
    cin>>m;
    while(m--)
    {
        string s;
        cin>>s;
        int x;
        if(s=="push")
        {
            cin>>x;
            e[++top]=x;
        }
        else if(s=="query")
        {
            cout<<e[top]<<endl;
        }
        else if(s=="empty")
        {
            cout<<(top==-1?"YES":"NO")<<endl;
        }
        else
        {
            top--;
        }
    }
    return 0;
}
//4.模拟队列
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010;
int e[N],l,r=-1;
int main()
{
    int m;
    cin>>m;
    while(m--)
    {
        string s;
        cin>>s;
        int x;
        if(s=="push")
        {
            cin>>x;
            e[++r]=x;
        }
        else if(s=="pop")
        {
            l++;
        }
        else if(s=="query")
        {
            cout<<e[l]<<endl;
        }
        else
        {
            cout<<(r>=l?"NO":"YES")<<endl;
        }
    }
    return 0;
}
//5.单调栈
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int e[N],top=-1;
int main()
{
    int m,x;
    cin>>m;
    for(int i=0;i<m;i++)
    {
        cin>>x;
        while(top>-1&&e[top]>=x) top--;
        if(top==-1) cout<<"-1 ";
        else cout<<e[top]<<" ";
        e[++top]=x;
    }
    return 0;
}
//6.单调队列-滑动窗口

#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int a[N],q[N];
int main()
{
    int n,k;
    scanf("%d%d",&n,&k);
    for(int i=0;i<n;i++)scanf("%d",&a[i]);
    int ff=0,tt=-1;
    for(int i=0;i<n;i++)
    {
        if(ff<=tt&&i-k+1>q[ff])ff++;
        while(ff<=tt&&a[i]<=a[q[tt]])tt--;
        q[++tt]=i;
        if(i+1>=k)
        {
            printf("%d ",a[q[ff]]);
        }
    }
    puts("");
    ff=0,tt=-1;
    for(int i=0;i<n;i++)
    {
        if(ff<=tt&&i-k+1>q[ff])ff++;
        while(ff<=tt&&a[i]>=a[q[tt]])tt--;
        q[++tt]=i;
        if(i+1>=k)
        {
            printf("%d ",a[q[ff]]);
        }
    }
    return 0;
}

//7.kmp字符串匹配
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010,M=1000010;
int ne[N];
int main()
{
    int n,m;
    char s[M],p[N];
    scanf("%d%s%d%s",&n,p+1,&m,s+1);
    for(int i=2,j=0;i<=n;i++)
    {
        while(j&&p[i]!=p[j+1]) j=ne[j];
        if(p[i]==p[j+1]) j++;
        ne[i]=j;
    }
    for(int i=1,j=0;i<=m;i++)
    {
        while(j&&s[i]!=p[j+1]) j=ne[j];
        if(s[i]==p[j+1]) j++;
        if(j>=n)
        {
            printf("%d ",i-n);
            j=ne[j];
        }
    }
    return 0;
}
//8.TIe字符串统计
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
using namespace std;
const int N=200003;
int son[N][26],cnt[N],idx;
void Insert(char s[])
{
    int p=0;
    for(int i=0;s[i];i++)
    {
        int k=s[i]-'a';
        if(!son[p][k]) son[p][k]=++idx;
        p=son[p][k];
    }
    cnt[p]++;
}int find(char s[])
{
    int p=0;
    for(int i=0;s[i];i++)
    {
        int k=s[i]-'a';
        if(!son[p][k]) return 0;
        p=son[p][k];
    }
    return cnt[p];
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        char s[100010],str[2];
        scanf("%s%s",str,s);
        if(*str=='I')
        {
            Insert(s);
        }
        else
        {
            printf("%d\n",find(s));
        }
    }
}

//9.合并集合
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int father[N];
int find(int x)
{
    if(father[x]!=x) father[x]=find(father[x]);
    return father[x];
}
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++) father[i]=i;
    while(m--)
    {
        char s[2];
        int a,b;
        scanf("%s%d%d",s,&a,&b);
        if(*s=='M') father[find(a)]=find(b);
        else
        {
            if(find(a)==find(b)) puts("Yes");
            else puts("No");
        }
    }
    return 0;
}
//10.堆排序
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010;
int h[N],size1;
void down(int u)
{
    int t=u;
    if(2*u<=size1&&h[t]>h[2*u]) t=2*u;
    if(2*u+1<=size1&&h[t]>h[2*u+1])t=2*u+1;
    if(t!=u)
    {
        swap(h[t],h[u]);
        down(t);
    }
}
void up(int u)
{
    while(u/2&&h[u/2]>h[u])
    {
        swap(h[u/2],h[u]);
        u/=2;
    }
}
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)scanf("%d",&h[i]);
    size1=n;
    for(int i=size1/2;i>=1;i--) down(i);
    while(m--)
    {
        printf("%d ",h[1]);
        swap(h[1],h[size1]);
        size1--;
        down(1);
    }
    return 0;
}
//11.模拟堆
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010;
int h[N],ph[N],hp[N],size1,m;
void heap_swap(int a,int b)
{
    swap(ph[hp[a]],ph[hp[b]]);
    swap(hp[a],hp[b]);
    swap(h[a],h[b]);
}
void down(int u)
{
    int t=u;
    if(2*u<=size1&&h[t]>h[2*u]) t=2*u;
    if(2*u+1<=size1&&h[t]>h[2*u+1])t=2*u+1;
    if(t!=u)
    {
        heap_swap(t,u);
        down(t);
    }
}
void up(int u)
{
    while(u/2&&h[u/2]>h[u])
    {
        heap_swap(u/2,u);
        u=u/2;
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    int k,x;
    while(n--)
    {
        char s[10];
        scanf("%s",s);
        if(!strcmp(s,"I"))
        {
            scanf("%d",&x);
            size1++,m++;
            ph[m]=size1,hp[size1]=m;
            h[size1]=x;
            up(size1);
        }
        else if(!strcmp(s,"PM"))
        {
            printf("%d\n",h[1]);
        }
        else if(!strcmp(s,"DM"))
        {
            heap_swap(1,size1);
            size1--;
            down(1);
        }
        else if(!strcmp(s,"D"))
        {
            scanf("%d",&k);
            k=ph[k];
            heap_swap(k,size1);
            size1--;
            down(k),up(k);
        }
        else
        {
            scanf("%d%d",&k,&x);
            k=ph[k];
            h[k]=x;
            down(k),up(k);
        }
    }
    return 0;
}
//12.模拟散列表
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=200003,null=0x3f3f3f3f;
int h[N];
int find(int x)
{
    int k=(x%N+N)%N;
    while(h[k]!=null&&h[k]!=x)
    {
        k++;
        if(k==N) k=0;
    }
    return k;
}
int main()
{
    int n;
    scanf("%d",&n);
    memset(h,0x3f,sizeof h);
    while(n--)
    {
        char s[2];
        int x;
        scanf("%s%d",s,&x);
        if(*s=='I') h[find(x)]=x;
        else
        {
            if(h[find(x)]!=null) puts("Yes");
            else puts("No");
        }
    }
}
//13.字符串哈希
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010,P=131;
typedef unsigned long long ULL;
ULL h[N],p[N];
char str[N];
int get(int l,int r)
{
    return h[r]-h[l-1]*p[r-l+1];
}
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    scanf("%s",str+1);
    p[0]=1;
    for(int i=1;i<=n;i++)
    {
        h[i]=h[i-1]*P+str[i];
        p[i]=p[i-1]*P;
    }
    while(m--)
    {
        int l1,r1,l2,r2;
        scanf("%d%d%d%d",&l1,&r1,&l2,&r2);
        if(get(l1,r1)==get(l2,r2)) puts("Yes");
        else puts("No");
    }
    return 0;
}

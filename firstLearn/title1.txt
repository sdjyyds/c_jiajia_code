//快速排序
#include <iostream>
#include <algorithm>
using namespace std;
const int N = 100100; 
int q[N];
void quick_sort(int q[], int l, int r)
{
    if (l >= r) return ;
    
    int i = l - 1, j = r + 1, x = q[(r+l-1)/2];
    while(i < j)
    {
        do i ++ ; while (q[i] < x);
        do j -- ; while (q[j] > x);
        if (i < j) swap(q[i], q[j]);
    }
    quick_sort(q, l, i-1);
    quick_sort(q, i, r);
}

int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i ++ ) scanf("%d", &q[i]);
    quick_sort (q, 0, n - 1);
    for (int i = 0; i < n; i ++ ) printf("%d ", q[i]);
    return 0;
}


//归并排序
#include<iostream>
#include<algorithm>
using namespace std;
#define N 100010
int ans[N],f[N];
void magsort(int a[],int l,int r)
{
    if(l>=r) return;
    int mid=(l+r)>>1;
    magsort(a,l,mid),magsort(a,mid+1,r);
    int i=l,j=mid+1,k=0;
    while(i<=mid&&j<=r)
    {
        if(a[i]<=a[j]) ans[k++]=a[i++];
        else ans[k++]=a[j++];
    }
    while(i<=mid) ans[k++]=a[i++];
    while(j<=r) ans[k++]=a[j++];
    for(i=0,j=l;j<=r;j++,i++) a[j]=ans[i];
}
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++) scanf("%d",&f[i]);
    magsort(f,0,n-1);
    for(int i=0;i<n;i++) printf("%d ",f[i]);
    return 0;
}


//二分查找
#include<iostream>
#include<algorithm>
using namespace std;
#define N 100000
int a[N];
int main()
{
    int n,q, k;
    scanf("%d%d",&n,&q);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);
    while(q--)
    {
        scanf("%d",&k);
        int l=0,r=n-1,mid;
        while(l<r)
        {
            mid=l+r>>1;
            if(a[mid]>=k) r=mid;
            else l=mid+1;
        }
        if(a[l]!=k) printf("-1 -1\n");
        else
        {
            printf("%d ",l);
            l=0,r=n-1;
            while(l<r)
            {
                mid=l+r+1>>1;
                if(a[mid]<=k) l=mid;
                else r=mid-1;
            }
            printf("%d\n",l);
        }
    }
    return 0;
}


//高精度加法
#include<iostream>
#include<vector>
#include<algorithm>
#include<stack>
using namespace std;
const int N=1e6+10;
vector<int> add(vector<int> A,vector<int> B)
{
    vector<int> C;
    int t=0;
    for(int i=0;i<A.size()||i<B.size();i++)
    {
        if(i<A.size()) t+=A[i];
        if(i<B.size()) t+=B[i];
        C.push_back(t%10);
        t/=10;
    }
    if(t) C.push_back(1);
    return C;
}
int main()
{
   string a,b;
   vector<int> A,B;
   cin>>a>>b;
   for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');
   for(int i=b.size()-1;i>=0;i--) B.push_back(b[i]-'0');
   vector<int> C=add(A,B);
   for(int i=C.size()-1;i>=0;i--) printf("%d",C[i]);
   return 0;
}	


//高精度减法
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
vector<int> sub(vector<int> &A,vector<int> &B)
{
    vector<int>C;
    int t=0;
    for(int i=0;i<A.size();i++)
    {
        t=A[i]+t;
        if(i<B.size()) t-=B[i];
        C.push_back((t+10)%10);
        if(t<0) t=-1;
        else t=0;
    }
    while(C.size()>1&&C.back()==0) C.pop_back();
    return C;
}
bool cmp(vector<int>A,vector<int>B)
{
    if(A.size()!=B.size()) return A.size()>B.size();
    else
        for(int i=A.size()-1;i>=0;i--)
            if(A[i]!=B[i]) return A[i]>B[i];
    return true;
}
int main()
{
    string a,b;
    cin>>a>>b;
    vector<int>A,B,C;
    for(int i=a.size()-1;i>=0;i--)A.push_back(a[i]-'0');
    for(int i=b.size()-1;i>=0;i--)B.push_back(b[i]-'0');
    if(cmp(A,B))
    {
        C=sub(A,B);
        for(int i=C.size()-1;i>=0;i--)cout<<C[i]<<"";
    }
    else
    {
        cout<<"-"<<"";
        C=sub(B,A);
        for(int i=C.size()-1;i>=0;i--)cout<<C[i]<<"";
    }
    return 0;
}


//高精度乘法
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
vector<int> mul(vector<int>&A,int B)
{
    vector<int>C;
    if(B==0)
    {
        C.push_back(0);
        return C;
    }
    int t=0;
    for(int i=0;i<A.size()||t;i++)
    {
        if(i<A.size()) t+=A[i]*B;
        C.push_back(t%10);
        t/=10;
    }
    return C;
}
int main()
{
    string a;
    int B;
    cin>>a>>B;
    vector<int> A;
    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');
    auto C=mul(A,B);
    for(int i=C.size()-1;i>=0;i--) cout<<C[i]<<"";
    return 0;
}


//高精度除法
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
vector<int> div(vector<int> A,int B,int &r)
{
    vector<int> C;
    int t=0;//t是余数
    for(int i=A.size()-1;i>=0;i--)
    {
        t=t*10+A[i];
        C.push_back(t/B);
        t=t%B;
    }
    r=t;
    reverse(C.begin(),C.end());
    while(C.size()>1&&C.back()==0) C.pop_back();
    return C;
}
int main()
{
    string a;
    vector<int>A;
    int B,r;
    cin>>a>>B;
    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');
    auto C=div(A,B,r);
    for(int i=C.size()-1;i>=0;i--) cout<<C[i]<<"";
    
    cout<<"\n"<<r<<"";
    return 0;    
}


//前缀和
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010;
int a[N],s[N];
int main()
{
	int n,m;
	cin>>n>>m;
	for(int i=1;i<=n;i++) cin>>a[i];
	for(int i=1;i<=n;i++) s[i]=s[i-1]+a[i];
	while(m--)
	{
		int l,r;
		cin>>l>>r;
		cout<<s[r]-s[l-1]<<endl;
	}
}
//子矩阵之和
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int a[N][N],s[N][N];
int main()
{
    int n,m,q;
    cin>>n>>m>>q;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++) cin>>a[i][j];
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++) s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j];
    }
    while(q--)
    {
        int x1,x2,y1,y2;
        cin>>x1>>y1>>x2>>y2;
        cout<<s[x2][y2]-s[x2][y1-1]-s[x1-1][y2]+s[x1-1][y1-1]<<endl;
    }
}


//差分
#include<iostream>
#include<algorithm>
using namespace std;
const int N=100010;
int a[N],s[N];
void insert(int l,int r,int x)
{
    a[l]+=x,a[r+1]-=x;
}
int main()
{
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=n;i++) cin>>s[i];
    for(int i=1;i<=n;i++) insert(i,i,s[i]);
    while(m--)
    {
        int l,r,c;
        cin>>l>>r>>c;
        insert(l,r,c);
    }
    for(int i=1;i<=n;i++) a[i]+=a[i-1];
    for(int i=1;i<=n;i++) printf("%d ",a[i]);
}


//差分矩阵
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int s[N][N],a[N][N];
void insert(int x1,int y1,int x2,int y2,int c)
{
    a[x1][y1]+=c,a[x2+1][y1]-=c,a[x1][y2+1]-=c,a[x2+1][y2+1]+=c;
}
int main()
{
    int n,m,q;
    cin>>n>>m>>q;
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++) scanf("%d",&s[i][j]);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++) insert(i,j,i,j,s[i][j]);
    while(q--)
    {
        int x1,x2,y1,y2,c;
        cin>>x1>>y1>>x2>>y2>>c;
        insert(x1,y1,x2,y2,c);
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++) a[i][j]+=a[i-1][j]+a[i][j-1]-a[i-1][j-1];
    }
        for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++) printf("%d ",a[i][j]);
        puts("");
    }
}


//双指针算法一：指向一个序列
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1e5+10;
int a[N],s[N];
int main()
{
    int n,ans=0;
    cin>>n;
    for(int i=0;i<n;i++) cin>>a[i];
    for(int i=0,j=0;i<n;i++)
    {
        s[a[i]]++;
        while(j<i&&s[a[i]]>1) s[a[j++]]--;
        ans=max(ans,i-j+1);
    }
    cout<<ans;
}
//双指针算法二：指向两个序列
#include <iostream>
using namespace std;
const int N = 1e5 + 5;
int n, m, x, a[N], b[N];

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> n >> m >> x;

    for (int i = 0; i < n; i ++) cin >> a[i];
    for (int i = 0; i < m; i ++) cin >> b[i];

    for (int i = 0; i < n; i ++) {
        int l = 0, r = m - 1;
        while (l < r) {
            int mid = l + r >> 1;
            if (a[i] + b[mid]>= x) r = mid;
            else l = mid + 1;
        }
        if (a[i] + b[l] == x) {
            cout << i << ' ' << l << '\n';
            break;
        }
    }

    return 0;
}


//位运算：典型二进制位运算
#include<iostream>
using namespace std;
int Getbit(int a)
{
    int ans=0;
    while(a)
    {
        a=a&(a-1);
        ans++;
    }
    return ans;
}
int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        int x;
        cin>>x;
        cout<<Getbit(x)<<" ";
    }
}


//离散化
#include<iostream>
#include<algorithm>
using namespace std;
const int N=3e5+10;
int a[N];
typedef pair<int,int>PII;
vector<PII>add,query;
vector<int> F;
int select(int idx)
{
    int l=0,r=F.size()-1;
    while(l<r)
    {
        int mid=(l+r)/2;
        if(F[mid]>=idx)r=mid;
        else l=mid+1;
    }
    return l+1;
}
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    while(n--)
    {
        int x,c;
        scanf("%d%d",&x,&c);
        add.push_back({x,c});
        F.push_back(x);
    }
    while(m--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        query.push_back({l,r});
        F.push_back(l);
        F.push_back(r);
    }
    sort(F.begin(),F.end());
    F.erase(unique(F.begin(),F.end()),F.end());
    for(auto a1:add)
    {
        int x=select(a1.first);
        a[x]+=a1.second;
    }
    for(int i=1;i<=F.size();i++)a[i]=a[i-1]+a[i];
    for(auto a1:query)
    {
        int l=select(a1.first),r=select(a1.second);
        printf("%d\n",a[r]-a[l-1]);
    }
}

//区间合并
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
typedef pair<int,int> PII;
void Collection(vector<PII>&a)
{
    vector<PII>c;
    int l=-2e9,r=-2e9;
    sort(a.begin(),a.end());
    for(auto a1:a)
    {
        if(r<a1.first)
        {
            if(r!=-2e9)c.push_back({l,r});
            l=a1.first;
            r=a1.second;
        }
        else
        {
           if(r<=a1.second) r=a1.second;
        }
    }
    if(r!=-2e9) c.push_back({l,r});
    a=c;
}
int main()
{
    int n;
    scanf("%d",&n);
    vector<PII>a;
    while(n--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        a.push_back({l,r});
    }
    Collection(a);
    printf("%d",a.size());
}

//两例综合
格子染色
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll ans;
typedef pair<int,int> PII;
typedef pair<int ,PII> PI;
void He(vector<PI> &Q)
{
    vector<PI>c;
    sort(Q.begin(),Q.end());
    int l=Q[0].second.first,r=Q[0].second.second,k=Q[0].first;
    for(int i=1;i<Q.size();i++)
    {
        if(k==Q[i].first)
        {
            if(r<Q[i].second.first)
            {
                c.push_back({k,{l,r}});
                ans+=(r-l+1);
                l=Q[i].second.first,r=Q[i].second.second;
            }
            else
            {
                if(r<Q[i].second.second) r=Q[i].second.second;
            }
        }
        else
        {
            c.push_back({k,{l,r}});
            ans+=(r-l+1);
            k=Q[i].first,l=Q[i].second.first,r=Q[i].second.second;
        }
    }
    c.push_back({k,{l,r}});
    ans+=(r-l+1);
    Q=c;
}
int main()
{
    int n;
    scanf("%d",&n);
    vector<PI> X,Y;
    while(n--)
    {
        int x1,x2,y1,y2;
        scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
        if(x1==x2) Y.push_back({x1,{min(y1,y2),max(y1,y2)}});
        else X.push_back({y1,{min(x1,x2),max(x1,x2)}});
    }
    He(X);
    He(Y);
    for(auto a:X)
    {
        for(auto b:Y)
            if(a.first>=b.second.first&&\
               a.first<=b.second.second&&\
               b.first>=a.second.first&&\
               b.first<=a.second.second)
               ans--;
    }
    printf("%lld",ans);
}
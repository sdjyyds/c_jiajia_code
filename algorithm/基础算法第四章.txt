
AcWing 866. 试除法判定质数
#include<iostream>
#include<algorithm>
using namespace std;
bool judge(int x)
{
    if(x<2) return false;
    
    for(int i=2;i<=x/i;i++)
        if(x%i==0) return false;
    return true;
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a;
        scanf("%d",&a);
        if(judge(a)) puts("Yes");
        else puts("No");
    }
    return 0;
}

AcWing 867. 分解质因数
#include<iostream>
#include<algorithm>
using namespace std;
void get_prime(int x)
{
    for(int i=2;i<=x/i;i++)
    {
        int s=0;
        if(x%i==0)
        {
            while(x%i==0)
            {
                x/=i;
                s++;
            }
            printf("%d %d\n",i,s);
        }
    }
    if(x>1) printf("%d %d\n",x,1);
    puts("");
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a;
        scanf("%d",&a);
        get_prime(a);
    }
    return 0;
}

AcWing 868. 筛质数
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int primes[N],idx;
bool st[N];
int n;
void get_primes(int x)
{
    for(int i=2;i<=x;i++)
    {
        if(!st[i]) primes[idx++]=i;
        for(int j=0;primes[j]<=x/i;j++)
        {
            st[i*primes[j]]=true;
            if(i%primes[j]==0) break;
        }
    }
}
int main()
{
    
    cin>>n;
    get_primes(n);
    printf("%d",idx);
    return 0;
}

AcWing 869. 试除法求约数

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

vector<int> getyue(int x)
{
    vector<int> res;
    for(int i=1;i<=x/i;i++)
    {
        if(x%i==0)
        {
            res.push_back(i);
            if(x/i!=i) res.push_back(x/i);
        }
    }
    sort(res.begin(),res.end());
    return res;
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int x;
        scanf("%d",&x);
        vector<int> res=getyue(x);
        for(auto i:res) printf("%d ",i);
        puts("");
    }
    return 0;
}
AcWing 870. 约数个数
#include<iostream>
#include<algorithm>
#include<cstring>
#include<unordered_map>
using namespace std;
const int mod=1e9+7;
typedef long long LL;
int res=1;
int main()
{
    int n;
    scanf("%d",&n);
    unordered_map<int,int>p;
    while(n--)
    {
        int x;
        scanf("%d",&x);
        for(int i=2;i<=x/i;i++)
        {
            if(x%i==0)
            {
                while(x%i==0)
                {
                    x/=i;
                    p[i]++;
                }
            }
        }
        if(x>1) p[x]++;
    }
    
    for(auto t:p)
        res=(LL)res*(t.second+1)%mod;
    
    printf("%d",res);
    return 0;
}

AcWing 871. 约数之和
#include<iostream>
#include<algorithm>
#include<unordered_map>
using namespace std;
const int mod=1e9+7;
typedef long long LL;
LL res=1;

int main()
{
    int n;
    cin>>n;
    unordered_map<int,int> p;
    while(n--)
    {
        int x;
        cin>>x;
        for(int i=2;i<=x/i;i++)
        {
            if(x%i==0)
            {
                while(x%i==0)
                {
                    x/=i;
                    p[i]++;
                }
            }
        }
        if(x>1) p[x]++;
    }
    
    for(auto i:p)
    {
        int t=1,s=i.second;
        while(s--) t=((LL)t*i.first+1)%mod;
        res=(LL)res*t%mod;
    }
    cout<<res;
    return 0;
}
AcWing 872. 最大公约数
#include<iostream>
#include<algorithm>
using namespace std;

int gcd(int a,int b)
{
    return b?gcd(b,a%b):a;
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        printf("%d\n",gcd(a,b));
    }
    return 0;
}

AcWing 873. 欧拉函数
#include<iostream>
#include<algorithm>
using namespace std;

int get_phi(int x)
{
    int res=x;
    for(int i=2;i<=x/i;i++)
    {
        if(x%i==0)
        {
            res=res/i*(i-1);
            while(x%i==0) x/=i;
        }
    }
    if(x>1) res=res/x*(x-1);
    
    return res;
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int x;
        scanf("%d",&x);
        printf("%d\n",get_phi(x));
    }
    return 0;
}
AcWing 874. 筛法求欧拉函数
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000010;
int primes[N],phi[N],idx;
bool st[N];
int n;
long long res;
void get_phis(int x)
{
    phi[1]=1;
    for(int i=2;i<=x;i++)
    {
        if(!st[i])
        {
            primes[idx++]=i;
            phi[i]=i-1;
        }
        for(int j=0;primes[j]<=x/i;j++)
        {
            int t=i*primes[j];
            st[t]=true;
            if(i%primes[j]==0)
            {
                phi[t]=phi[i]*primes[j];
                break;
            }
            phi[t]=phi[i]*(primes[j]-1);
        }
    }
}

int main()
{
    scanf("%d",&n);
    get_phis(n);
    for(int i=1;i<=n;i++) res+=phi[i];
    printf("%ld",res);
    return 0;
}

AcWing 875. 快速幂
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long LL;

int qmi(int a,int b,int mod)
{
    int res=1;
    while(b)
    {
        if(b&1) res=(LL)res*a%mod;
        a=(LL)a*a%mod;
        b>>=1;
    }
    return res;
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a,b,mod;
        scanf("%d%d%d",&a,&b,&mod);
        printf("%d\n",qmi(a,b,mod));
    }
    return 0;
}
AcWing 876. 快速幂求逆元
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long LL;

int qmi(int a,int b,int mod)
{
    int res=1;
    while(b)
    {
        if(b&1) res=(LL)res*a%mod;
        a=(LL)a*a%mod;
        b>>=1;
    }
    return res;
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a,p;
        scanf("%d%d",&a,&p);
        if(a%p==0) puts("impossible");
        else printf("%d\n",qmi(a,p-2,p));
    }
    return 0;
}

AcWing 877. 扩展欧几里得算法
#include<iostream>
#include<algorithm>
using namespace std;

int exgcd(int a,int b,int &x,int &y)
{
    if(b==0)
    {
        x=1,y=0;
        return a;
    }
    
    int d=exgcd(b,a%b,y,x);
    y-=a/b*x;
    
    return d;
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a,b,x,y;
        scanf("%d%d",&a,&b);
        exgcd(a,b,x,y);
        printf("%d %d\n",x,y);
    }
    return 0;
}
AcWing 878. 线性同余方程
#include<iostream>
#include<algorithm>
using namespace std;

int exgcd(int a,int b,int &x,int &y)
{
    if(b==0)
    {
        x=1,y=0;
        return a;
    }
    int d=exgcd(b,a%b,y,x);
    y-=a/b*x;
    return d;
}

int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int a,b,m;
        int x,y;
        scanf("%d%d%d",&a,&b,&m);
        int d=exgcd(a,m,x,y);
        if(b%d==0) printf("%ld\n",(long long )x*b/d%m);
        else puts("impossible");
    }
    return 0;
}


AcWing 204. 表达整数的奇怪方式


AcWing 883. 高斯消元解线性方程组

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
const int N=110;
double g[N][N],esp=1e-6;
int n;
int gaosi()
{
    int r=0,c=0;
    for(int c=0;c<n;c++)
    {
        int t=r;
        
        for(int i=r;i<n;i++)
            if(fabs(g[i][c])>fabs(g[t][c])) t=i;
        
        if(fabs(g[t][c])<esp) continue;
        
        for(int j=c;j<=n;j++) swap(g[r][j],g[t][j]);
        
        for(int j=n;j>=c;j--) g[r][j]/=g[r][c];
        
        for(int i=r+1;i<n;i++)
            if(fabs(g[i][c])>esp)
                for(int j=n;j>=c;j--) 
                    g[i][j]-=g[r][j]*g[i][c];
        
        r++;
    }
    if(r<n)
    {
        for(int i=r;i<n;i++)
            if(fabs(g[i][n])>esp) return 2;
        return 1;
    }
    
    for(int i=n-1;i>=0;i--)
        for(int j=i+1;j<n;j++)
            g[i][n]-=g[i][j]*g[j][n];
    
    return 0;
}

int main()
{
    scanf("%d",&n);
    
    for(int i=0;i<n;i++)
        for(int j=0;j<=n;j++) scanf("%lf",&g[i][j]);
        
    int t=gaosi();
    if(t==2) puts("No solution");
    else if(t==1) puts("Infinite group solutions");
    else
    {
        for(int i=0;i<n;i++) printf("%.2lf\n",g[i][n]);
    }
    return 0;
}
AcWing 885. 求组合数 
#include<iostream>
#include<algorithm>
using namespace std;
const int mod=1e9+7,N=2010;
typedef long long LL;
int C[N][N];

void Init()
{
    for(int i=0;i<N;i++)
        for(int j=0;j<=i;j++)
             if(!j) C[i][j]=1;
             else C[i][j]=(C[i-1][j]+C[i-1][j-1])%mod;
}

int main()
{
    int n;
    scanf("%d",&n);
    Init();
    while(n--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        printf("%d\n",C[a][b]);
    }
    return 0;
}
AcWing 886. 求组合数 
#include<iostream>
#include<algorithm>
using namespace std;

const int N=100010,mod=1e9+7;
typedef long long LL;
int fact[N],infact[N];

int qmi(int a,int b,int mod)
{
    int res=1;
    while(b)
    {
        if(b&1) res=(LL)res*a%mod;
        a=(LL)a*a%mod;
        b>>=1;
    }
    return res;
}

void Init()
{
    fact[0]=infact[0]=1;
    
    for(int i=1;i<N;i++) fact[i]=(LL)fact[i-1]*i%mod;
    for(int i=1;i<N;i++) infact[i]=(LL)infact[i-1]*qmi(i,mod-2,mod)%mod;
}

int main()
{
    int n;
    scanf("%d",&n);
    Init();
    
    while(n--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        printf("%d\n",(LL)fact[a]*infact[b]%mod*infact[a-b]%mod);
    }
    return 0;
}
AcWing 887. 求组合数 
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

typedef long long LL;
int qmi(int a,int b,int mod)
{
    int res=1;
    while(b)
    {
        if(b&1) res=(LL)res*a%mod;
        a=(LL)a*a%mod;
        b>>=1;
    }
    
    return res;
}

int c(int a,int b,int mod)
{
    int res=1;
    for(int i=a;i>a-b;i--) res=(LL)res*i%mod;
    for(int i=1;i<=b;i++)  res=(LL)res*qmi(i,mod-2,mod)%mod;
    return res;
}
int lucasi(LL a,LL b,int p)
{
    if(a<p&&b<p) return c(a,b,p);
    return (LL)lucasi(a/p,b/p,p)*c(a%p,b%p,p)%p;
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        LL a,b;
        int p;
        scanf("%ld%ld%d",&a,&b,&p);
        printf("%ld\n",lucasi(a,b,p));
    }
    
    return 0;
}

AcWing 888. 求组合数 
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
using namespace std;
const int N=100010;
int primes[N],idx,cnt[N],a,b;
bool st[N];
void get_primes(int x)
{
    for(int i=2;i<=x;i++)
    {
        if(!st[i]) primes[idx++]=i;
        for(int j=0;primes[j]<=x/i;j++)
        {
            st[i*primes[j]]=true;
            if(i%primes[j]==0) break;
        }
    }
}

int get(int x,int p)
{
    int s=0;
    while(x)
    {
        s+=x/p;
        x/=p;
    }
    return s;
}

vector<int> mul(vector<int>&res,int p)
{
    vector<int> tmp;
    int t=0;
    for(int i=0;i<res.size();i++)
    {
        t+=res[i]*p;
        tmp.push_back(t%10);
        t/=10;
    }
    while(t)
    {
        tmp.push_back(t%10);
        t/=10;
    }
    return tmp;
}
int main()
{
    scanf("%d%d",&a,&b);
    get_primes(a);
    
    for(int i=0;i<idx;i++)
        cnt[i]=get(a,primes[i])-get(b,primes[i])-get(a-b,primes[i]);
    
    vector<int> res;
    res.push_back(1);
    for(int i=0;i<idx;i++)
        for(int j=0;j<cnt[i];j++)
            res=mul(res,primes[i]);
            
    for(int i=res.size()-1;i>=0;i--) printf("%d",res[i]);
    return 0;
}
AcWing 889. 满足条件的01序列
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
const int mod=1e9+7;
int qmi(int a,int b,int mod)
{
    int res=1;
    while(b)
    {
        if(b&1)res=(LL)res*a%mod;
        a=(LL)a*a%mod;
        b>>=1;
    }
    return res;
}

int main()
{
    int n;
    scanf("%d",&n);
    int a=2*n,b=n,res=1;
    for(int i=a;i>a-b;i--) res=(LL)res*i%mod;
    for(int i=1;i<=b;i++) res=(LL)res*qmi(i,mod-2,mod)%mod;
    res=(LL)res*qmi(n+1,mod-2,mod)%mod;
    
    printf("%d",res);
    return 0;
}

容斥原理
AcWing 890. 能被整除的数
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long LL;
const int N=20;
int p[N],n,m;

int main()
{
    scanf("%d%d",&n,&m);
    for(int i=0;i<m;i++) scanf("%d",&p[i]);
    int res=0;
    for(int i=1;i<1<<m;i++)
    {
        int s=0,t=1;
        for(int j=0;j<m;j++)
        {
            if(i>>j&1)
            {
                if((LL)t*p[j]>n)
                {
                    t=-1;
                    break;
                }
                s++;
                t*=p[j];
            }
        }
        
        if(t!=-1)
        {
           if(s&1) res+=n/t;
           else res-=n/t;
        }
    }
    
    printf("%d",res);
    return 0;
}

博弈论
AcWing 891. Nim游戏
#include<iostream>
#include<algorithm>
using namespace std;

int main()
{
    int n,res=0;
    scanf("%d",&n);
    while(n--)
    {
        int x;
        scanf("%d",&x);
        res^=x;
    }
    
    printf("%s",res?"Yes":"No");
    
    return 0;
}


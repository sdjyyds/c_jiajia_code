DFS
//1.排列数字
#include<iostream>
#include<algorithm>
using namespace std;
const int N=10;
int e[N],n;
bool st[N];
void dfs(int u)
{
    if(u==n)
    {
        for(int i=0;i<n;i++) printf("%d ",e[i]);
        printf("\n");
        return;
    }
    for(int i=1;i<=n;i++)
        if(!st[i])
        {
            st[i]=true;
            e[u]=i;
            dfs(u+1);
            st[i]=false;
        }
}
int main()
{
    scanf("%d",&n);
    dfs(0);
    
}
//2.AcWing 843.n-皇后问题
#include<iostream>
#include<algorithm>
using namespace std;
const int N=10;
int n;
char a[N][N];
bool col[N],dg[N],udg[N];
void dfs(int u)
{
    if(u==n)
    {
        for(int i=0;i<n;i++) puts(a[i]);
        puts("");
        return;
    }
    for(int i=0;i<n;i++)
        if(!col[i]&&!dg[u-i+n]&&!udg[u+i])
        {
            a[u][i]='Q';
            col[i]=dg[u-i+n]=udg[u+i]=true;
            dfs(u+1);
            a[u][i]='.';
            col[i]=dg[u-i+n]=udg[u+i]=false;
        }
}
int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            a[i][j]='.';
    dfs(0);
    return 0;
}
BFS
AcWing 844. 走迷宫
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
typedef pair<int,int> PII;
const int N=110;
int g[N][N],n,m,d[N][N];
int bfs()
{
    memset(d,-1,sizeof d);
    d[0][0]=0;
    queue<PII> q;
    q.push({0,0});
    
    int dx[4]={0,0,1,-1},dy[4]={1,-1,0,0};
    while(q.size())
    {
        auto t=q.front();
        q.pop();
        int x=t.first,y=t.second;
        for(int i=0;i<4;i++)
        {
            int newx=x+dx[i],newy=y+dy[i];
            if(d[newx][newy]==-1&&newx>=0&&newx<n&&newy>=0&&newy<m&&!g[newx][newy])
            {
                d[newx][newy]=d[x][y]+1;
                q.push({newx,newy});
            }
        }
    }
    return d[n-1][m-1];
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++) scanf("%d",&g[i][j]);
    printf("%d",bfs());
    return 0;
}
树与图的深度优先遍历
AcWing 846. 树的重心
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010;
int n,h[N],e[2*N],ne[2*N],idx;
int ans=N;
bool st[N];
void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}
int dfs(int u)
{
    int res=0,m=1;
    st[u]=true;
    for(int i=h[u];i!=-1;i=ne[i])
    {
        int j=e[i];
        if(!st[j])
        {
            int k=dfs(j);
            res=max(res,k);
            m+=k;
        }
    }    
    res=max(res,n-m);
    ans=min(ans,res);
    return m;
}
int main()
{
    scanf("%d",&n);
    memset(h,-1,sizeof h);
    for(int i=0;i<n-1;i++)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b),add(b,a);
    }
    dfs(1);
    printf("%d",ans);
}
树与图的广度优先遍历
AcWing 847. 图中点的层次
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N=100010;
int e[N],ne[N],h[N],idx;
int d[N],n,m;
void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}
int bfs()
{
    memset(d,-1,sizeof d);
    d[1]=0;
    queue<int>q;
    q.push(1);
    while(q.size())
    {
        int t=q.front();
        q.pop();
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            if(d[j]==-1)
            {
                d[j]=d[t]+1;
                q.push(j);
            }
        }
    }
    return d[n];
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    
    
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b);
    }
    printf("%d",bfs());
    return 0;
}
拓扑排序
AcWing 848. 有向图的拓扑序列
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010;
int h[N],e[N],ne[N],idx,d[N],n,m,q[N];
void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}
bool topsort()
{
    int hh=0,tt=-1;
    for(int i=1;i<=n;i++)
        if(!d[i]) q[++tt]=i;
    while(tt>=hh)
    {
        int t=q[hh++];
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            if(--d[j]==0) q[++tt]=j;
        }
    }
    return tt==n-1;
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b);
        d[b]++;
    }
    if(topsort()) for(int i=0;i<n;i++) printf("%d ",q[i]);
    else printf("-1");
    return 0;
}
Dijkstra
AcWing 849. Dijkstra求最短路 
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=510;
int g[N][N],dist[N],n,m;
bool st[N];
int dijstra()
{
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    
    
    for(int i=1;i<=n;i++)
    {
        int t=-1;
        for(int j=1;j<=n;j++)
            if(!st[j]&&(t==-1||dist[t]>dist[j])) t=j;
        for(int j=1;j<=n;j++)
            dist[j]=min(dist[j],dist[t]+g[t][j]);
        st[t]=true;
    }
    return dist[n];
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(g,0x3f,sizeof g);
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        g[a][b]=min(g[a][b],c);
    }
    int t=dijstra();
    if(t==0x3f3f3f3f) printf("-1");
    else printf("%d",t);
}#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=510;
int g[N][N],dist[N],n,m;
bool st[N];
int dijstra()
{
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    
    
    for(int i=1;i<=n;i++)
    {
        int t=-1;
        for(int j=1;j<=n;j++)
            if(!st[j]&&(t==-1||dist[t]>dist[j])) t=j;
        for(int j=1;j<=n;j++)
            dist[j]=min(dist[j],dist[t]+g[t][j]);
        st[t]=true;
    }
    return dist[n];
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(g,0x3f,sizeof g);
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        g[a][b]=min(g[a][b],c);
    }
    int t=dijstra();
    if(t==0x3f3f3f3f) printf("-1");
    else printf("%d",t);
}
AcWing 850. Dijkstra求最短路 
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N=200010;
int e[N],ne[N],idx,h[N],w[N];
bool st[N];
int n,m,dist[N];
typedef pair<int,int> PII;
void add(int a,int b,int c)
{
    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;
}
int dijkstra()
{
    memset(dist,0x3f,sizeof dist);
    priority_queue<PII,vector<PII>,greater<PII>> heap;
    heap.emplace(0,1);
    dist[1]=0;
    while(heap.size())
    {
        auto t=heap.top();
        heap.pop();
        int vex=t.second,instance=t.first;
        if(st[vex]) continue;
        st[vex]=true;
        for(int i=h[vex];i!=-1;i=ne[i])
        {
            int j=e[i];
            if(dist[j]>dist[vex]+w[i]) dist[j]=dist[vex]+w[i];
            if(!st[j]) heap.emplace(dist[j],j);
        }
    }
    return dist[n];
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    int t=dijkstra();
    if(t==0x3f3f3f3f) printf("-1");
    else printf("%d",t);
}

bellman-ford
AcWing 853. 有边数限制的最短路
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010;
struct Edge{
    int a,b,w;
}E[N];
int dist[N],backup[N];
int n,m,k;
int bellmanford()
{
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    for(int i=1;i<=k;i++)
    {
        memcpy(backup,dist,sizeof dist);
        for(int j=0;j<m;j++)
        {
            if(dist[E[j].b]>backup[E[j].a]+E[j].w) dist[E[j].b]=backup[E[j].a]+E[j].w;
        }
    }
    return dist[n];
}
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for(int i=0;i<m;i++)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        E[i]={a,b,c};
    }
    int t=bellmanford();
    if(t>0x3f3f3f3f/2) printf("impossible");
    else printf("%d",t);
    return 0;
}
spfa
AcWing 851. spfa求最短路
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N=100010;
int e[N],ne[N],w[N],h[N],idx,dist[N];
int n,m;
bool st[N];
void add(int a,int b,int c)
{
     e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;
}
int spfa()
{
    memset(dist,0x3f,sizeof dist);
    queue<int> q;
    dist[1]=0;
    q.push(1);
    st[1]=true;
    while(q.size())
    {
        int t=q.front();
        q.pop();
        st[t]=false;
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            if(dist[j]>dist[t]+w[i])
            {
                dist[j]=dist[t]+w[i];
                if(!st[j])
                {
                    q.push(j);
                    st[j]=true;
                }
            }
          
        }
    }
    return dist[n];
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    int t=spfa();
    if(t>0x3f3f3f3f/2) printf("impossible");
    else printf("%d",t);
}
AcWing 852. spfa判断负环
#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
const int N=100010;
int h[N],idx,e[N],ne[N],w[N],dist[N],cnt[N];
bool st[N];
int n,m;
void add(int a,int b,int c)
{
    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;
}
bool spfa()
{
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    queue<int>q;
    for(int i=1;i<=n;i++)
    {
        q.push(i);
        st[i]=true;
    }
    while(q.size())
    {
        int t=q.front();
        q.pop();
        st[t]=false;
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            if(dist[j]>dist[t]+w[i])
            {
                dist[j]=dist[t]+w[i];
                cnt[j]=cnt[t]+1;
                if(cnt[j]>=n) return true;
                if(!st[j])
                {
                    q.push(j);
                    st[j]=true;
                }
            }
        }
    }
    return false;
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    if(spfa()) printf("Yes");
    else printf("No");
    return 0;
}
Floyd
AcWing 854. Floyd求最短路
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=210,INF=1e9;
int g[N][N];
int n,m,k;
void floyd()
{
    for(int k=1;k<=n;k++)
        for(int i=1;i<=n;i++)   
            for(int j=1;j<=n;j++)
                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);
}
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            if(i==j) g[i][j]=0;
            else g[i][j]=INF;
    
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
       // printf("%d %d %d\n",a,b,c);
        g[a][b]=min(g[a][b],c);
    }
    floyd();
    while(k--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
       // printf("%d %d\n",l,r);
        if(g[l][r]>INF/2) puts("impossible");
        else printf("%d\n",g[l][r]);
    }
}
Prim
AcWing 858. Prim算法求最小生成树
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=510,INF=0x3f3f3f3f;
int g[N][N],dist[N];
int n,m;
bool st[N];
int prim()
{
    memset(dist,0x3f,sizeof dist);
    
    int res=0;
    for(int i=0;i<n;i++)
    {
        int t=-1;
        for(int j=1;j<=n;j++)
            if(!st[j]&&(t==-1||dist[t]>dist[j])) t=j;
        
        if(i&&dist[t]==INF) return INF;
        if(i) res+=dist[t];
        
        
        for(int j=1;j<=n;j++)  dist[j]=min(dist[j],g[t][j]);
        
        
        st[t]=true;
    }
    return res;
}
int main()
{
    memset(g,0x3f,sizeof g);
    scanf("%d%d",&n,&m);
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        g[a][b]=g[b][a]=min(g[a][b],c);
    }
    int t=prim();
    if(t==INF) puts("impossible");
    else printf("%d\n",t);
}
Kruskal
AcWing 859. Kruskal算法求最小生成树
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=200010;
int p[N],n,m;
int res=0,ans=0;
struct Edge{
    int a,b,c;
}Edges[N];
bool cmp(Edge &a,Edge &b)
{
    return a.c<b.c;
}
int find(int x)
{
    if(x!=p[x]) return p[x]=find(p[x]);
    return p[x];
}
int krusual()
{
    for(int i=1;i<=n;i++) p[i]=i;
    for(int i=0;i<m;i++)
    {
        int a=Edges[i].a,b=Edges[i].b,w=Edges[i].c;
        a=find(a),b=find(b);
        if(a!=b)
        {
            p[a]=b;
            res+=w;
            ans++;
        }
    }
    return ans>=n-1;
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=0;i<m;i++)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        Edges[i]={a,b,c};
    }
    sort(Edges,Edges+m,cmp);
    if(krusual()) printf("%d",res);
    else printf("impossible");
}
染色法判定二分图
AcWing 860. 染色法判定二分图
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=100010,M=200010;
int e[M],idx,h[N],ne[M];
int color[N],n,m;
void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}
bool tct(int u,int c)
{
    color[u]=c;
    for(int i=h[u];i!=-1;i=ne[i])
    {
        int j=e[i];
        if(!color[j])
        {
            if(!tct(j,3-c)) return false;
        }
        else if(color[j]==color[u]) return false;
    }
    return true;
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof h);
    
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b),add(b,a);
    }
    bool flag=true;
    for(int i=1;i<=n;i++)
    {
        if(!color[i])
        {
            if(!tct(i,1))
            {
                flag=false;
                break;
            }
        }
    }
    if(flag) printf("Yes");
    else printf("No");
    return 0;
}

匈牙利算法
AcWing 861. 二分图的最大匹配
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int N=510,M=100010;
int h[N],e[M],ne[M],idx;
int n1,n2,m,match[N];
bool st[N];
void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}
bool find(int x)
{
    for(int i=h[x];i!=-1;i=ne[i])
    {
        int j=e[i];
        
        if(!st[j])
        {
            st[j]=true;
            if(match[j]==0||find(match[j]))
            {
                match[j]=x;
                return true;
            }
        }
    }
    return false;
}
int main()
{
    scanf("%d%d%d",&n1,&n2,&m);
    memset(h,-1,sizeof h);
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b);
    }
    int res=0;
    for(int i=1;i<=n1;i++)
    {
        memset(st,false,sizeof st);
        if(find(i)) res++;
    }
    printf("%d",res);
}



背包问题
AcWing 2. 01背包问题
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int f[N];
int V,n;

int main()
{
    scanf("%d%d",&n,&V);
    
    int v,w;
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&v,&w);
        for(int j=V;j>=v;j--)
            f[j]=max(f[j],f[j-v]+w);
    }        
    printf("%d",f[V]);
    
    return 0;
}


#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int f[N][N],v[N],w[N];
int V,n;

int main()
{
    scanf("%d%d",&n,&V);
    for(int i=1;i<=n;i++) scanf("%d%d",&v[i],&w[i]);
    
    for(int i=1;i<=n;i++)
        for(int j=0;j<=V;j++)
        {
            f[i][j]=f[i-1][j];
            if(j>=v[i]) f[i][j]=max(f[i][j],f[i-1][j-v[i]]+w[i]);
        }
            
    
    printf("%d",f[n][V]);
    
    return 0;
}
AcWing 3. 完全背包问题
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int f[N],n,V;

int main()
{
    scanf("%d%d",&n,&V);
    int w,v;
    
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&v,&w);
        for(int j=v;j<=V;j++)
            f[j]=max(f[j],f[j-v]+w);
    }
    
    printf("%d",f[V]);
    
    return 0;
}

#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int f[N][N],n,V;

int main()
{
    scanf("%d%d",&n,&V);
    int w,v;
    
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&v,&w);
        for(int j=0;j<=V;j++)
        {
            f[i][j]=f[i-1][j];
            if(j>=v) f[i][j]=max(f[i][j],f[i][j-v]+w);
        }
    }
    
    printf("%d",f[n][V]);
    
    return 0;
}
AcWing 4. 多重背包问题
#include<iostream>
#include<algorithm>
using namespace std;

const int N=10010;
int f[N],v[N],w[N];
int n,V,t=1;

int main()
{
    scanf("%d%d",&n,&V);
    
    for(int i=1;i<=n;i++)
    {
        int v1,w1,s1;
        scanf("%d%d%d",&v1,&w1,&s1);
        for(int i=1;i<=s1;i*=2)
        {
            v[t]=i*v1,w[t++]=i*w1;
            s1-=i;
        }
        if(s1) v[t]=s1*v1,w[t++]=s1*w1;
    }
    
    for(int i=1;i<t;i++)
        for(int j=V;j>=v[i];j--)
            f[j]=max(f[j],f[j-v[i]]+w[i]);
    
    printf("%d",f[V]);
    
    return 0;
}

AcWing 5. 多重背包问题 

#include<iostream>
#include<algorithm>
using namespace std;

const int N=110;
int f[N],v[N],w[N];
int n,V,t;

int main()
{
    scanf("%d%d",&n,&V);
    
    for(int i=1;i<=n;i++)
    {
        int v1,w1,s1;
        scanf("%d%d%d",&v1,&w1,&s1);
        for(int i=1;i<=s1;i+=2)
        {
            v[++t]=i*v1,w[t]=i*w1;
            s1-=i;
        }
        if(s1>1) v[++t]=s1*v1,w[t]=s1*w1;
    }
    
    
    for(int i=1;i<=t;i++)
        for(int j=V;j>=v[i];j--)
            f[j]=max(f[j],f[j-v[i]]+w[i]);
    
    printf("%d",f[V]);
    
    return 0;
}
AcWing 9. 分组背包问题
#include<iostream>
#include<algorithm>
using namespace std;

const int N=110;
int f[N],w[N][N],v[N][N],s[N];
int n,V;

int main()
{
    scanf("%d%d",&n,&V);
    
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&s[i]);
        for(int k=0;k<s[i];k++) scanf("%d%d",&v[i][k],&w[i][k]);
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=V;j>=0;j--)
            for(int k=0;k<s[i];k++)
                if(j>=v[i][k]) f[j]=max(f[j],f[j-v[i][k]]+w[i][k]);
    }
    
    printf("%d",f[V]);
    
    return 0;
}

线性DP

AcWing 898. 数字三角形
#include<iostream>
#include<algorithm>
using namespace std;
const int N=510,INF=-1e9;
int f[N][N],a[N][N];
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++) 
        for(int j=1;j<=i;j++) scanf("%d",&a[i][j]);
        
    for(int i=0;i<=n;i++) 
        for(int j=0;j<=i+1;j++) f[i][j]=INF;
        
    f[1][1]=a[1][1];
    
    for(int i=2;i<=n;i++)
        for(int j=1;j<=i;j++)
            f[i][j]=max(f[i-1][j],f[i-1][j-1])+a[i][j];
            
    int res=INF;
    for(int i=1;i<=n;i++) res=max(res,f[n][i]);
    
    printf("%d",res);
    
    return 0;
    
}

AcWing 895. 最长上升子序列
#include<iostream>
#include<algorithm>
using namespace std;
const int N=1010;
int f[N],w[N],cnt;//f[i]表示长度为i的最小数

int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++) scanf("%d",&w[i]);
    
    f[cnt++]=w[0];
    
    for(int i=1;i<n;i++)
    {
        if(w[i]>f[cnt-1]) f[cnt++]=w[i];
        else
        {
            int l=0,r=cnt-1;
            while(l<r)//找到第一个大于等于wi的数
            {
                int mid=l+r>>1;
                if(f[mid]>=w[i]) r=mid;
                else l=mid+1;
            }
            f[l]=w[i];
        }
    }
    printf("%d",cnt);
    return 0;
}

AcWing 896. 最长上升子序列 

#include<iostream>
#include<algorithm>
using namespace std;

const int N=1000010;
int q[N],a[N],n;

int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);
    
    q[0]=-2e9;
    int len=0;
    for(int i=0;i<n;i++)
    {
        int l=0,r=len;
        while(l<r)
        {
            int mid=l+r+1>>1;
            if(q[mid]<a[i]) l=mid;
            else r=mid-1;
        }
        len=max(len,r+1);
        q[r+1]=a[i];
    }
    printf("%d",len);
    
    return 0;
}

AcWing 897. 最长公共子序列

#include<iostream>
#include<algorithm>
using namespace std;

const int N=1010;
int f[N][N];
char a[N],b[N];

int main()
{
    int n,m;
     cin>>n>>m>>a+1>>b+1;

    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            f[i][j]=max(f[i-1][j],f[i][j-1]);
            if(a[i]==b[j]) f[i][j]=max(f[i-1][j-1]+1,f[i][j]);
        }
        
    cout<<f[n][m]<<endl;
    
    return 0;
}

AcWing 902. 最短编辑距离
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

const int N=1010;
int f[N][N];
int n,m;
char a[N],b[N];

int main()
{
    cin>>n>>a+1>>m>>b+1;
    
    for(int i=0;i<=n;i++) f[i][0]=i;
    for(int i=0;i<=m;i++) f[0][i]=i;
    
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            f[i][j]=min(f[i-1][j]+1,f[i][j-1]+1);
            if(a[i]==b[j]) f[i][j]=min(f[i][j],f[i-1][j-1]);
            else f[i][j]=min(f[i][j],f[i-1][j-1]+1);
        }
    
    printf("%d",f[n][m]);
    return 0;
}

AcWing 899. 编辑距离
#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;
const int N=1010,M=15;
char a[N][M];

int check(char a[],char b[])
{
    int n=strlen(a+1),m=strlen(b+1);
    int f[M][M];
    
    for(int i=0;i<=n;i++) f[i][0]=i;
    for(int i=0;i<=m;i++) f[0][i]=i;
    
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            f[i][j]=min(f[i-1][j]+1,f[i][j-1]+1);
            if(a[i]==b[j]) f[i][j]=min(f[i][j],f[i-1][j-1]);
            else f[i][j]=min(f[i][j],f[i-1][j-1]+1);
        }
        
    return f[n][m];
}

int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    
    for(int i=0;i<n;i++) scanf("%s",a[i]+1);
    while(m--)
    {
        int len;
        char b[M];
        scanf("%s%d",b+1,&len);
        int s=0;
        
        for(int i=0;i<n;i++)
            if(check(a[i],b)<=len) s++;
            
        printf("%d\n",s);
    }
    
    return 0;
}

区间DP
AcWing 282. 石子合并
#include<iostream>
#include<algorithm>
using namespace std;

const int N=310;
int s[N],f[N][N];//i到j的值
int n;

int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++) scanf("%d",&s[i]),s[i]+=s[i-1];
    
    for(int len=2;len<=n;len++)
        for(int i=1;i+len-1<=n;i++)
        {
            int j=i+len-1;
            f[i][j]=2e9;
            for(int k=i;k<j;k++)
                f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]+s[j]-s[i-1]);
        }
        
    printf("%d",f[1][n]);    
    return 0;
}

计数类DP
AcWing 900. 整数划分
#include<iostream>
#include<algorithm>

using namespace std;

const int N=1010,mod=1e9+7;
int f[N];

int main()
{
    int n;
    scanf("%d",&n);
    f[0]=1;
    
    for(int i=1;i<=n;i++)
        for(int j=i;j<=n;j++)
             f[j]=(f[j-i]+f[j])%mod;
            
    cout<<f[n];
    
    return 0;
}

数位统计DP


AcWing 338. 计数问题
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

int get(vector<int> num,int l,int r)
{
    int s=0;
    for(int i=r;i>=l;i--) s=s*10+num[i];
    return s;
}
int pow10(int x)
{
    int res=1;
    while(x--) res*=10;
    return res;
}

int check(int a,int x)
{
    vector<int> num;
    while(a)
    {
        num.push_back(a%10);
        a/=10;
    }
    
    int res=0,n=num.size();
    for(int i=n-1-!x;i>=0;i--)
    {
        if(i<n-1)
        {
            res+=get(num,i+1,n-1)*pow10(i);
            if(!x) res-=pow10(i);
        }
        
        if(num[i]>x) res+=pow10(i);
        else if(num[i]==x) res+=get(num,0,i-1)+1;
    }
    
    return res;
}
int main()
{
    int a,b;
    
    while(scanf("%d%d",&a,&b),a||b)
    {
        if(a<b) swap(a,b);
        
        for(int i=0;i<10;i++)
            printf("%d ",check(a,i)-check(b-1,i));
        puts("");
    }
    
    return 0;
}

状态压缩DP

AcWing 291. 蒙德里安的梦想
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
using namespace std;

const int N=12,M=1<<N;
long long f[N][M];
bool st[M];
vector<int> state[M];
int main()
{
    int n,m;
    while(scanf("%d%d",&n,&m),n||m)
    {
        for(int i=0;i< 1<<n; i++)
        {
            int cnt=0;
            st[i]=true;
            for(int j=0;j<n;j++)
            {
                if( (i>>j) &1)
                {
                    if(cnt&1) st[i]=false;
                    cnt=0;
                }
                else cnt++;
            }
            if(cnt&1) st[i]=false;
        }
        
        for(int j=0;j< 1<<n ;j++)
        {
            state[j].clear();
            for(int k=0;k< 1<<n;k++)
                if(st[j|k]&&(j&k)==0) state[j].push_back(k);
        }
        memset(f,0,sizeof f);
        f[0][0]=1;
        
         
        for(int i=1;i<=m;i++)
            for(int j=0;j< 1<<n;j++)
                for(auto k:state[j])
                {
                    f[i][j]+=f[i-1][k];
                }

        printf("%ld\n",f[m][0]);
    }
    return 0;
}

AcWing 91. 最短Hamilton路径
#include<iostream>
#include<algorithm>
using namespace std;

const int N=20,M= 1<<N;
int f[M][N],a[N][N];

int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++) scanf("%d",&a[i][j]);
        
    f[0][1]=1;
    
    for(int i=1;i<= 1<<n; i+=2)
        if(i&1)
            for(int j=0;j<n;j++)
                if(i>>j &1)
                    for(int k=0;k<n;k++)
                        
            
}
树形DP


AcWing 285. 没有上司的舞会
#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;
const int N=6010;
int h[N],e[N],ne[N],idx;
int f[N][2],happy[N];
bool st[N];

void add(int a,int b)
{
    e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}

void dfs(int x)
{
    
    f[x][1]=happy[x];
    for(int i=h[x];i!=-1;i=ne[i])
    {
        int j=e[i];
        dfs(j);
        f[x][1]+=f[j][0];
        f[x][0]+=max(f[j][0],f[j][1]);
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++) scanf("%d",&happy[i]);
    memset(h,-1,sizeof h);
    
    int root=1;
    for(int i=0;i<n-1;i++)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(b,a);
        st[a]=true;
    }
    for(int i=1;i<=n;i++)
        if(!st[i]){
            root=i;
            break;
        }
    
    dfs(root);
    
    printf("%d",max(f[root][1],f[root][0]));
    
    return 0;    
}

记忆化搜索


AcWing 901. 滑雪
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=310;
int a[N][N],f[N][N];
int dx[4]={0,0,1,-1},dy[4]={1,-1,0,0};
int n,m;

int dfs(int x,int y)
{
    int &k=f[x][y];
    if(k!=-1) return k;
    k=1;
    for(int i=0;i<4;i++)
    {
        int x1=dx[i]+x,y1=dy[i]+y;
        if(x1>=1&&x1<=n&&y1>=1&&y1<=m&&a[x1][y1]<a[x][y])
            k=max(k,dfs(x1,y1)+1);
    }
    
    return k;
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++) scanf("%d",&a[i][j]);
        
    memset(f,-1,sizeof f);
    
    int res=1;
    for(int i=1;i<=n;i++) 
        for(int j=1;j<=m;j++) 
            res=max(res,dfs(i,j));
    
    printf("%d",res);
    return 0;
}

